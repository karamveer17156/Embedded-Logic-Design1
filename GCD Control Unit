`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/11/2018 06:28:47 PM
// Design Name: 
// Module Name: Controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Control_unit(
    input clk,
    input clr,
    input go,
    input eqflag,
    input ltflag,
    output reg xmsel=0,
    output reg ymsel=0,
    output reg xld=0,
    output reg yld=0,
    output reg gld=0
    );
    reg [2:0]next=0, present=0;
    
    parameter start=3'd0,inp=3'd1,test1=3'd2,test2=3'd3,update1=3'd4,update2=3'd5,done=3'd6;
    

       
     always@(*)
     begin
        case(present)
            start:
            begin
            
            if(go) next<=inp;
            else  next<=start;
            end
            
            inp:
            begin
                xmsel<=1;
                ymsel<=1;
                xld<=1;
                yld<=1;
                next<=test1;
            end
            
                        
            test1:
            begin
            xld<=0;
            yld<=0;
            if(eqflag==0) next<=test2;
            else next<=done;
            end
            
            test2:
            begin
            if(ltflag==1) next<=update1;
            else if(ltflag==0) next<=update2;
            end
            
            update1:
            begin
            yld<=1;
            ymsel<=0;
            next<=test1;
            end
            
            update2:
            begin
            next<=test1;
            xld<=1;
            xmsel<=0;
            
            end
            
            
            done:
            begin
	if(clr)
	next<= start;
	else
	next<= done;
            gld<=1;
            end
     default: next<=start;
     endcase
     end   
     
     
          always @(posedge clk or posedge clr) //for present state
       begin
       if(clr)present<=start;
       else present<=next;
       end     
     

endmodule
